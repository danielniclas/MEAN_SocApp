var app=angular.module("app",["ngRoute"]);console.log("In the MODULAR Angular files in 'ng' directory");var app=angular.module("app");app.controller("ApplicationCtrl",["$scope","$rootScope",function(t,e){t.$on("login",function(e,o){t.currentUser=o}),e.intercept=!1}]);var app=angular.module("app");app.service("authInterceptor",["$rootScope","$q",function(t,e){var o=this;o.responseError=function(o){return 401==o.status&&(console.log("INTERCEPTOR ERROR 401"),t.intercept="true"),e.reject(o)}}]),app.config(["$httpProvider",function(t){t.interceptors.push("authInterceptor")}]);var app=angular.module("app");app.controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(o,r){function n(){t.$watch("$rootScope.intercept",function(e,o){console.log("Watcher triggered"),t.unauthorized=!0})}e.login(o,r).then(function(e){t.$emit("login",e.data)}),setTimeout(n,0)}}]);var app=angular.module("app");app.controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&(post={username:"MookersService",body:t.postBody},e.create(post).success(function(e){t.posts.unshift(e),t.postBody=null}),t.postBody=null)},e.fetch().success(function(e){t.posts=e})}]);var app=angular.module("app");app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("api/posts")},this.create=function(e){return t.post("api/posts",e)}}]);var app=angular.module("app");app.controller("RegistrationCtrl",["$scope","UserSvc",function(t,e){t.register=function(o,r){e.createUser(o,r).then(function(e){t.$emit("login",e.data)})}}]);var app=angular.module("app");app.config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/register",{controller:"RegistrationCtrl",templateUrl:"register.html"})}]);var app=angular.module("app");app.service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(o,r){return t.post("/api/sessions",{username:o,password:r}).then(function(o){return e.token=o.data,t.defaults.headers.common["x-auth"]=o.data,e.getUser()})},e.createUser=function(o,r){return t.post("/api/users",{username:o,password:r}).then(function(){return e.login(o,r)})}}]);
//# sourceMappingURL=data:application/json;base64,
