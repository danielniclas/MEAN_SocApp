var app=angular.module("app",["ngRoute"]);console.log("In the MODULAR Angular files in 'ng' directory");var app=angular.module("app");app.controller("LoginCtrl",["$scope","UserSvc",function(t,o){t.login=function(t,e){o.login(t,e).then(function(t){console.log(t)})}}]);var app=angular.module("app");app.controller("PostsCtrl",["$scope","PostsSvc",function(t,o){t.addPost=function(){t.postBody&&(post={username:"MookersService",body:t.postBody},o.create(post).success(function(o){t.posts.unshift(o),t.postBody=null}),t.postBody=null)},o.fetch().success(function(o){t.posts=o})}]);var app=angular.module("app");app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("api/posts")},this.create=function(o){return t.post("api/posts",o)}}]);var app=angular.module("app");app.config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"})}]);var app=angular.module("app");app.service("UserSvc",["$http",function(t){var o=this;o.getUser=function(){return t.get("/api/users",{headers:{"X-Auth":this.token}})},o.login=function(e,n){return t.post("/api/sessions",{username:e,password:n}).then(function(t){return o.token=t.data,o.getUser()})}}]);
//# sourceMappingURL=data:application/json;base64,
