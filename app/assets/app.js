var app=angular.module("app",["ngRoute"]);console.log("In the MODULAR Angular files in 'ng' directory");var app=angular.module("app");app.controller("ApplicationCtrl",["$scope",function(t){t.$on("login",function(e,n){t.currentUser=n})}]);var app=angular.module("app");app.controller("LoginCtrl",["$scope","UserSvc",function(t,e){t.login=function(n,o){e.login(n,o).then(function(e){t.$emit("login",e.data)})}}]);var app=angular.module("app");app.controller("PostsCtrl",["$scope","PostsSvc",function(t,e){t.addPost=function(){t.postBody&&(post={username:"MookersService",body:t.postBody},e.create(post).success(function(e){t.posts.unshift(e),t.postBody=null}),t.postBody=null)},e.fetch().success(function(e){t.posts=e})}]);var app=angular.module("app");app.service("PostsSvc",["$http",function(t){this.fetch=function(){return t.get("api/posts")},this.create=function(e){return t.post("api/posts",e)}}]);var app=angular.module("app");app.controller("RegistrationCtrl",["$scope","UserSvc",function(t,e){t.register=function(n,o){e.createUser(n,o).then(function(e){t.$emit("login",e.data)})}}]);var app=angular.module("app");app.config(["$routeProvider",function(t){t.when("/",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/login",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/register",{controller:"RegistrationCtrl",templateUrl:"register.html"})}]);var app=angular.module("app");app.service("UserSvc",["$http",function(t){var e=this;e.getUser=function(){return t.get("/api/users")},e.login=function(n,o){return t.post("/api/sessions",{username:n,password:o}).then(function(n){return e.token=n.data,t.defaults.headers.common["x-auth"]=n.data,e.getUser()})},e.createUser=function(n,o){return t.post("/api/users",{username:n,password:o}).then(function(){return e.login(n,o)})}}]);
//# sourceMappingURL=data:application/json;base64,
